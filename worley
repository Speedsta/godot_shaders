shader_type canvas_item;
//render_mode unshaded;

uniform float max_z = 1.0;
uniform float max_distance = 1.0;
uniform float rchanel = 1.0;
uniform float gchanel = 1.3;
uniform float bchanel = 1.7;

uniform vec3 worley_point_01 = vec3(0.5, 1.5, 1.0);
uniform vec3 worley_point_02 = vec3(0.5, 1.0, 1.0);
uniform vec3 worley_point_03 = vec3(0.8, 1.4, 1.0);
uniform vec3 worley_point_04 = vec3(0.9, 0.0, 1.0);
uniform vec3 worley_point_05 = vec3(0.7, 1.2, 1.0);
uniform vec3 worley_point_06 = vec3(0.3, 1.0, 1.0);
uniform vec3 worley_point_07 = vec3(0.1, 0.7, 1.0);
uniform vec3 worley_point_08 = vec3(0.1, -0.9, 1.0);
uniform vec3 worley_point_09 = vec3(0.3, 0.2, 1.0);
uniform vec3 worley_point_10 = vec3(0.1, 0.4, 1.0);

float worley_distance(vec3 point, vec3 worley_point, float p_max){
	float value = p_max;
	for (float z = -1.0; z < 1.1; z += 1.0) {
		for (float y = -1.0; y < 1.1; y += 1.0) {
			for (float x = -1.0; x < 1.1; x += 1.0){
				vec3 delta = worley_point - point + vec3(x,y,z);
				float distance = length(delta);
				if (distance < value){
						value = distance;
				}	
			}
		}
	}
	return value;

}

float worley_value(vec3 pos) {
	float value = max_distance;
	vec3 fpos = mod(pos, 1.0);
	
	value = worley_distance(pos, worley_point_01, value);
	value = worley_distance(pos, worley_point_02, value);	
	value = worley_distance(pos, worley_point_03, value);
	value = worley_distance(pos, worley_point_04, value);
	value = worley_distance(pos, worley_point_05, value);
	value = worley_distance(pos, worley_point_06, value);	
	value = worley_distance(pos, worley_point_07, value);
	value = worley_distance(pos, worley_point_08, value);
	value = worley_distance(pos, worley_point_09, value);	
	value = worley_distance(pos, worley_point_10, value);
	//value = worley_distance(pos, worley1, value);
	
	return clamp(value / max_distance, 0.0, 1.0);

}


void fragment(){
	float z = floor(UV.y * max_z);
	float y = (UV.y * max_z) - z;
	vec3 pos = vec3(UV.x, y, z / max_z);
	vec4 result = vec4(0.0, 0.0, 0.0, 1.0);
	
	result.x = worley_value(pos * rchanel);
	result.y = worley_value(pos * bchanel);
	result.z = worley_value(pos * gchanel);
		
	COLOR = result;
}
